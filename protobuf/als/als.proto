syntax = "proto3";

package als;

option go_package = "github.com/ibrahimozekici/chirpstack-api/als";
option java_package = "io.chirpstack.api.als";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";


// AlarmServerService provides the Alarm-server API methods.
service AlarmServerService {
    // CreateDevice creates the given device.
    rpc CreateAlarm(CreateAlarmRequest) returns (CreateAlarmResponse) {}
    rpc GetAlarm(GetAlarmRequest) returns (GetAlarmResponse){}
}

message Alarm{
	int64 id=1;
	string devEui = 2;
	float minTreshold = 3;
	float maxTreshold = 4;
	bool sms = 5;
	bool email = 6;
	bool notification = 7;
	bool temperature = 8;
	bool humadity = 9;
	bool ec = 10;
	bool door = 11;
	bool wLeak = 12;
	int64 userID = 13;
	string ipAddress = 14;
	bool isTimeLimitActive = 15;
	float alarmStartTime = 16;
	float alarmStopTime = 17;
	int64 zoneCategoryID = 18;
	bool isActive = 19;
}

message AlarmDateTime {
    int64 id = 1 [json_name = "id"];

    int64 alarm_id = 2 [json_name = "alarm_id"];

    int64 alarm_day = 3 [json_name = "alarm_day"];

    float alarm_start_time = 4[json_name = "alarm_start_time"];

    float alarm_end_time = 5[json_name = "alarm_end_time"];
}

message CreateAlarmRequest{
    Alarm alarm = 1;
}

message CreateAlarmResponse{
    Alarm alarm = 1;
}

message GetAlarmRequest{
    int64 alarmID = 1;
}

message GetAlarmResponse{
    Alarm alarm = 1;
}







