syntax = "proto3";

package api;

option go_package = "github.com/ibrahimozekici/chirpstack-api/go/v5/as/external/api";
option java_package = "io.chirpstack.api.as.external.api";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// KitchenService defines a set of RPC methods for managing kitchen-related data and logs.
service KitchenService {
    // CreateKitchenUser creates a new kitchen user.
    rpc CreateKitchenUser(CreateKitchenUserRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/kitchen/user"
            body: "*"
        };
    }

    // GetKitchenUser retrieves a list of kitchen users.
    rpc GetKitchenUser(GetKitchenUserRequest) returns (GetKitchenUserResponse) {
        option (google.api.http) = {
            get: "/api/kitchen/user/{organization_id}"
        };
    }

    rpc UpdateKitchenUser(UpdateKitchenUserRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/kitchen/user"
            body: "*"
        };
    }

    rpc DeleteKitchenUser(DeleteKitchenUserRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/kitchen/user/{id}"
        };
    }

    // GetDepartmentList retrieves a list of all departments.
    rpc GetDepartmentList(GetDepartmentListRequest) returns (GetDepartmentListResponse) {
        option (google.api.http) = {
            get: "/api/kitchen/departments"
        };
    }

    // GetActivityListForDepartment retrieves a list of activities for a specific department.
    rpc GetActivityListForDepartment(GetActivityListForDepartmentRequest) returns (GetActivityListForDepartmentResponse) {
        option (google.api.http) = {
            get: "/api/kitchen/department/{department_id}/activities"
        };
    }

    // GetActivitiesForUser retrieves a list of activities for a specific user.
    rpc GetActivitiesForUser(GetActivitiesForUserRequest) returns (GetActivitiesForUserResponse) {
        option (google.api.http) = {
            get: "/api/kitchen/user/{user_id}/activities"
        };
    }

    // GetRecipeList retrieves a list of all recipes.
    rpc GetRecipeList(GetRecipeListRequest) returns (GetRecipeListResponse) {
        option (google.api.http) = {
            get: "/api/kitchen/recipes"
        };
    }

    // // GetRecipeIngredients retrieves a list of ingredients for a specific recipe.
    // rpc GetRecipeIngredients(GetRecipeIngredientsRequest) returns (GetRecipeIngredientsResponse) {
    //     option (google.api.http) = {
    //         get: "/api/kitchen/{recipe_id}/recipe_ingredients"
    //     };
    // }

    // GetIngredientList retrieves a list of all ingredients.
    rpc GetIngredientList(GetIngredientListRequest) returns (GetIngredientListResponse) {
        option (google.api.http) = {
            get: "/api/kitchen/ingredients"
        };
    }

    rpc GetDefrostableList(GetDefrostableListRequest) returns (GetDefrostableListResponse) {
        option (google.api.http) = {
            get: "/api/kitchen/defrostable"
        };
    }

    rpc GetFreezableList(GetFreezableListRequest) returns (GetFreezableListResponse) {
        option (google.api.http) = {
            get: "/api/kitchen/freezable"
        };
    }

    // CreateRecipeLog creates a new recipe log entry.
    rpc CreateRecipeLog(CreateRecipeLogRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/kitchen/recipe_log"
            body: "*"
        };
    }

    rpc CreateRecipeHotLog(CreateRecipeHotLogRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/kitchen/recipe_hot_log"
            body: "*"
        };
    }

    rpc GetRecipeHotLogList(GetRecipeHotLogListRequest) returns (GetRecipeHotLogListResponse) {
        option (google.api.http) = {
            get: "/api/kitchen/recipe_hot_log"
        };
    }

    // CreateDefrostLog creates a new defrost log entry.
    rpc CreateDefrostLog(CreateDefrostLogRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/kitchen/defrost_log"
            body: "*"
        };
    }

    // CreateFrostLog creates a new frost log entry.
    rpc CreateFrostLog(CreateFrostLogRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/kitchen/frost_log"
            body: "*"
        };
    }

    // CreateSanitizeLog creates a new sanitize log entry.
    rpc CreateSanitizeLog(CreateSanitizeLogRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/kitchen/sanitize_log"
            body: "*"
        };
    }

    rpc CreateWasteLog(CreateWasteLogRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/kitchen/waste_log"
            body: "*"
        };
    }

    // GetRecipeLogList retrieves a list of recipe logs within a specified date range.
    rpc GetRecipeLogList(GetRecipeLogListRequest) returns (GetRecipeLogListResponse) {
        option (google.api.http) = {
            get: "/api/kitchen/recipe_log"
        };
    }

    // GetDefrostLogList retrieves a list of defrost logs within a specified date range.
    rpc GetDefrostLogList(GetDefrostLogListRequest) returns (GetDefrostLogListResponse) {
        option (google.api.http) = {
            get: "/api/kitchen/defrost_log"
        };
    }

    // GetFrostLogList retrieves a list of frost logs within a specified date range.
    rpc GetFrostLogList(GetFrostLogListRequest) returns (GetFrostLogListResponse) {
        option (google.api.http) = {
            get: "/api/kitchen/frost_log"
        };
    }

    // GetSanitizeLogList retrieves a list of sanitize logs within a specified date range.
    rpc GetSanitizeLogList(GetSanitizeLogListRequest) returns (GetSanitizeLogListResponse) {
        option (google.api.http) = {
            get: "/api/kitchen/sanitize_log"
        };
    }

    rpc GetWasteLogList(GetWasteLogListRequest) returns (GetWasteLogListResponse) {
        option (google.api.http) = {
            get: "/api/kitchen/waste_log"
        };
    }

rpc CreateTemperatureControlLog(CreateTemperatureControlLogRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
        post: "/api/kitchen/temperature-control"
        body: "*"
    };
}

rpc GetTemperatureControlLogList(GetTemperatureControlLogListRequest) returns (GetTemperatureControlLogListResponse) {
    option (google.api.http) = {
        get: "/api/kitchen/temperature-control"
    };
}

rpc CreateStorageControlLog(CreateStorageControlLogRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
        post: "/api/kitchen/storage-control"
        body: "*"
    };
}

rpc GetStorageControlLogList(GetStorageControlLogListRequest) returns (GetStorageControlLogListResponse) {
    option (google.api.http) = {
        get: "/api/kitchen/storage-control"
    };
}
//     rpc UpdateRecipeIngredients(UpdateRecipeIngredientsRequest) returns (google.protobuf.Empty) {
//   option (google.api.http) = {
//     put: "/api/kitchen/recipe/{recipe_id}/ingredients"
//     body: "*"
//   };
// }
}

// KitchenUserItem represents a kitchen user with associated department.
message KitchenUserItem {
    int64 id = 1;
    string name = 2 [json_name = "name"];
    DepartmentItem user_department = 3 [json_name = "userDepartment"];  // One-to-one relationship
}

// DepartmentItem represents a department with associated activities.
message DepartmentItem {
    int64 id = 1;
    string name = 2 [json_name = "name"];
    repeated ActivityItem activities = 3 [json_name = "activities"];
}

// ActivityItem represents an activity.
message ActivityItem {
    int64 id = 1;
    string name = 2 [json_name = "name"];
}

// IngredientItem represents an ingredient with its properties.
message IngredientItem {
    int64 id = 1;
    string name = 2 [json_name = "name"];
    string unit = 3 [json_name = "unit"];
    bool freezable = 4 [json_name = "freezable"];
    bool sanitizable = 5 [json_name = "sanitizable"];
}

// RecipeItem represents a recipe.
message RecipeItem {
    int64 id = 1;
    string name = 2 [json_name = "name"];
    bool freezable = 3 [json_name = "freezable"];
    bool defrostable = 4 [json_name = "defrostable"];
    bool cookable = 5 [json_name = "cookable"];
}

// RecipeIngredientItem represents an ingredient used in a recipe with its quantity.
message RecipeIngredientItem {
    IngredientItem ingredient = 1 [json_name = "ingredient"];
    float quantity = 2 [json_name = "quantity"];
}

// RecipeLogItem represents a log entry for a recipe.
message RecipeLogItem {
    RecipeItem recipe = 1 [json_name = "recipe"];
    google.protobuf.Timestamp prep_start_time = 2 [json_name = "prepStartTime"];
    google.protobuf.Timestamp prep_end_time = 3 [json_name = "prepEndTime"];
    float cook_heat = 4 [json_name = "cookHeat"];
    google.protobuf.Timestamp cool_start_time = 5 [json_name = "coolStartTime"];
    google.protobuf.Timestamp cool_end_time = 6 [json_name = "coolEndTime"];
    float cool_heat = 7 [json_name = "coolHeat"];
    KitchenUserItem kitchen_user = 8 [json_name = "kitchenUser"];
    // repeated RecipeIngredientItem recipe_ingredients = 9 [json_name = "recipeIngredients"];
    google.protobuf.Timestamp submission_date = 10 [json_name = "submissionDate"];
    double recipe_portion = 11 [json_name = "recipePortion"];
    bool recycle = 12 [json_name = "recycle"];
    string recycleDescription = 13 [json_name = "recycleDescription"];
}

// DefrostLogItem represents a log entry for defrosting an ingredient.
message DefrostLogItem {
    IngredientItem ingredient = 1 [json_name = "ingredient"];
    RecipeItem recipe = 2 [json_name = "recipe"];  // Optional: recipe being defrosted (alternative to ingredient)
    float start_temperature = 3 [json_name = "startTemperature"];
    google.protobuf.Timestamp expire_date = 4 [json_name = "expireDate"];
    bool cold_water = 5 [json_name = "coldWater"];
    bool cold_room = 6 [json_name = "coldRoom"];
    float water_temperature = 7 [json_name = "waterTemperature"];
    google.protobuf.Timestamp water_time = 8 [json_name = "waterTime"];
    google.protobuf.Timestamp finish_date_time = 9 [json_name = "finishDateTime"];
    float end_temperature = 10 [json_name = "endTemperature"];
    google.protobuf.Timestamp submission_date = 11 [json_name = "submissionDate"];
    float quantity = 12 [json_name = "quantity"];
    KitchenUserItem user = 13 [json_name = "user"];
    string batch_no = 14 [json_name = "batchNo"];
    google.protobuf.Timestamp start_date_time = 15 [json_name = "startDateTime"];
}

// FrostLogItem represents a log entry for freezing an ingredient.
message FrostLogItem {
    IngredientItem ingredient = 1 [json_name = "ingredient"];
    RecipeItem recipe = 2 [json_name = "recipe"];  // Optional: recipe being frozen (alternative to ingredient)
    google.protobuf.Timestamp frost_date = 3 [json_name = "frostDate"];
    google.protobuf.Timestamp production_date = 4 [json_name = "productionDate"];
    google.protobuf.Timestamp expiration_date = 5 [json_name = "expirationDate"];
    KitchenUserItem user = 6 [json_name = "user"];
    google.protobuf.Timestamp submission_date = 7 [json_name = "submissionDate"];
    float quantity = 8 [json_name = "quantity"];
}

// SanitizeLogItem represents a log entry for sanitizing an ingredient.
message SanitizeLogItem {
    repeated int64 ingredient_ids = 1 [json_name = "ingredientIds"];
    repeated string ingredient_names = 2 [json_name = "ingredientNames"];
    google.protobuf.Timestamp date = 3 [json_name = "date"];
    google.protobuf.Timestamp pre_wash_time = 4 [json_name = "preWashTime"];
    int64 chlorine_ppm = 5 [json_name = "chlorinePpm"];
    google.protobuf.Timestamp sanitize_time = 6 [json_name = "sanitizeTime"];
    google.protobuf.Timestamp wash_time = 7 [json_name = "washTime"];
    google.protobuf.Timestamp end_time = 8 [json_name = "endTime"];
    bool ozone_wash = 9 [json_name = "ozoneWash"];
    KitchenUserItem user = 10 [json_name = "user"];
    google.protobuf.Timestamp submission_date = 11 [json_name = "submissionDate"];
    float quantity = 12 [json_name = "quantity"];
}

// Detaylı kırılım: hem toplam hem ürün bazlı map
message WasteBreakdown {
  // Toplam değerler (mevcut kolonlar)
  double destruction = 1;
  double returned_from_buffet = 2;
  double expired = 3;

  // Ürün → miktar map'leri (hstore kolonları ile eşleşir)
  map<string, string> destruction_products = 5 [json_name = "destructionProducts"];
  map<string, string> return_products      = 6 [json_name = "returnProducts"];
  map<string, string> expired_products     = 7 [json_name = "expiredProducts"];
}

// Günlük departman özeti
message WasteSummary {
  DepartmentItem department = 1;
  WasteBreakdown morning_waste = 2;
  WasteBreakdown lunch_waste = 3;
  WasteBreakdown evening_waste = 4;
  google.protobuf.Timestamp day = 5;
}

// Günlük detay kayıt
message WasteLogItem {
  int64 id = 1 [json_name = "id"];
  int64 user_id = 2 [json_name = "userId"];
  int64 department_id = 3 [json_name = "departmentId"];
  WasteBreakdown morning_waste = 4 [json_name = "morningWaste"];
  WasteBreakdown lunch_waste = 5 [json_name = "lunchWaste"];
  WasteBreakdown evening_waste = 6 [json_name = "eveningWaste"];
  google.protobuf.Timestamp submission_date = 7 [json_name = "submissionDate"];
}

message CreateKitchenUserRequest {
    string name = 1;
    int64 organization_id = 2;
    int64 department_id = 3;
}

// GetKitchenUserRequest is the request message for GetKitchenUser RPC.
message GetKitchenUserRequest {
    int64 organization_id = 1;
    int64 department_id = 2;
}

message UpdateKitchenUserRequest {
    KitchenUserItem kitchen_user_item = 1;
    int64 organization_id = 2;
    int64 department_id = 3;
}

message DeleteKitchenUserRequest {
    int64 id = 1;  // The ID of the kitchen user to be deleted
    int64 organization_id = 2;  // The ID of the organization to which the user belongs
    int64 department_id = 3;  // The ID of the department to which the user belongs
}

// GetKitchenUserResponse is the response message for GetKitchenUser RPC.
message GetKitchenUserResponse {
    repeated KitchenUserItem user_item = 1;
    int64 count = 2;
}

// GetActivityListForDepartmentRequest is the request message for GetActivityListForDepartment RPC.
message GetActivityListForDepartmentRequest {
    int64 department_id = 1;
    int64 organization_id = 2;
}

// GetActivityListForDepartmentResponse is the response message for GetActivityListForDepartment RPC.
message GetActivityListForDepartmentResponse {
    repeated ActivityItem activity_item = 1;
    int64 count = 2;
}

// GetActivitiesForUserRequest is the request message for GetActivitiesForUser RPC.
message GetActivitiesForUserRequest {
    int64 user_id = 1;  // The ID of the user whose activities are being requested
    int64 organization_id = 2;
}

// GetActivitiesForUserResponse is the response message for GetActivitiesForUser RPC.
message GetActivitiesForUserResponse {
    repeated ActivityItem activities = 1;  // List of activities for the user
    int32 total_count = 2;             // Total number of activities available
}

// GetDepartmentListRequest is the request message for GetDepartmentList RPC.
message GetDepartmentListRequest {
    int64 organization_id = 1;
    int64 department_id = 2;  // Optional: filter by specific department
}

// GetDepartmentListResponse is the response message for GetDepartmentList RPC.
message GetDepartmentListResponse {
    repeated DepartmentItem department_item = 1;
    int64 count = 2;
}

// GetRecipeListRequest is the request message for GetRecipeList RPC.
message GetRecipeListRequest {
    int64 organization_id = 1;
    int64 department_id = 2;  // Optional: filter by specific department
}

// GetRecipeListResponse is the response message for GetRecipeList RPC.
message GetRecipeListResponse {
    repeated RecipeItem recipe_item = 1;
    int64 count = 2;
}

// // GetRecipeIngredientsRequest is the request message for GetRecipeIngredients RPC.
// message GetRecipeIngredientsRequest {
//     int64 recipe_id = 1;
//     int64 organization_id = 2;
//     int64 department_id = 3;
// }

// // GetRecipeIngredientsResponse is the response message for GetRecipeIngredients RPC.
// message GetRecipeIngredientsResponse {
//     repeated RecipeIngredientItem recipe_ingredients = 1;
// }

// CreateRecipeLogRequest is the request message for CreateRecipeLog RPC.
message CreateRecipeLogRequest {
    RecipeLogItem recipe_log_item = 1;
    int64 organization_id = 2;
    int64 department_id = 3;
}

// GetRecipeLogListRequest is the request message for GetRecipeLogList RPC.
message GetRecipeLogListRequest {
    google.protobuf.Timestamp start_date = 1;
    google.protobuf.Timestamp end_date = 2;
    int64 organization_id = 3;
    int64 department_id = 4;
}

// GetRecipeLogListResponse is the response message for GetRecipeLogList RPC.
message GetRecipeLogListResponse {
    repeated RecipeLogItem recipe_log_item_list = 1;
    int64 count = 2;
}

// CreateDefrostLogRequest is the request message for CreateDefrostLog RPC.
message CreateDefrostLogRequest {
    DefrostLogItem defrost_log_item = 1;
    int64 organization_id = 2;
    int64 department_id = 3;
}

// GetDefrostLogListRequest is the request message for GetDefrostLogList RPC.
message GetDefrostLogListRequest {
    google.protobuf.Timestamp start_date = 1;
    google.protobuf.Timestamp end_date = 2;
    int64 organization_id = 3;
    int64 department_id = 4;
}

// GetDefrostLogListResponse is the response message for GetDefrostLogList RPC.
message GetDefrostLogListResponse {
    repeated DefrostLogItem defrost_log_item_list = 1;
    int64 count = 2;
}

// CreateFrostLogRequest is the request message for CreateFrostLog RPC.
message CreateFrostLogRequest {
    FrostLogItem frost_log_item = 1;
    int64 organization_id = 2;
    int64 department_id = 3;
}

// GetFrostLogListRequest is the request message for GetFrostLogList RPC.
message GetFrostLogListRequest {
    google.protobuf.Timestamp start_date = 1;
    google.protobuf.Timestamp end_date = 2;
    int64 organization_id = 3;
    int64 department_id = 4;
}

// GetFrostLogListResponse is the response message for GetFrostLogList RPC.
message GetFrostLogListResponse {
    repeated FrostLogItem frost_log_item_list = 1;
    int64 count = 2;
}

// CreateSanitizeLogRequest is the request message for CreateSanitizeLog RPC.
message CreateSanitizeLogRequest {
    SanitizeLogItem sanitize_log_item = 1;
    int64 organization_id = 2;
    int64 department_id = 3;
}

// GetSanitizeLogListRequest is the request message for GetSanitizeLogList RPC.
message GetSanitizeLogListRequest {
    google.protobuf.Timestamp start_date = 1;
    google.protobuf.Timestamp end_date = 2;
    int64 organization_id = 3;
    int64 department_id = 4;
}

// GetSanitizeLogListResponse is the response message for GetSanitizeLogList RPC.
message GetSanitizeLogListResponse {
    repeated SanitizeLogItem sanitize_log_item_list = 1;
    int64 count = 2;
}

// GetIngredientListRequest is the request message for GetIngredientList RPC.
message GetIngredientListRequest {
    int64 organization_id = 1;
    int64 department_id = 2;
}

// GetIngredientListResponse is the response message for GetIngredientList RPC.
message GetIngredientListResponse {
    repeated IngredientItem ingredient_item_list = 1;
    int64 count = 2;
}

// GetWasteLogListRequest is the request message for GetWasteLogList RPC.
message GetWasteLogListRequest {
    google.protobuf.Timestamp start_date = 1;
    google.protobuf.Timestamp end_date = 2;
    int64 organization_id = 3;
    int64 department_id = 4;
}

// GetWasteLogListResponse is the response message for GetWasteLogList RPC.
message GetWasteLogListResponse {
    repeated WasteSummary waste_log_item_list = 1;
    int64 count = 2;
}

// Temperature control messages
message SessionTemperatureControl {
    float temperature = 1;
    float humidity = 2;
    string controller_name = 3 [json_name = "controllerName"];
    string notes = 4;
}

// Temperature measurement at specific time
message TemperatureMeasurement {
    float temperature = 1 [json_name = "temperature"];  // nullable in TypeScript becomes optional
    string controller_name = 2 [json_name = "controllerName"];
}

message TemperatureControlLogItem {
    int64 id = 1 [json_name = "id"];
    int64 user_id = 2 [json_name = "userId"];
    int64 organization_id = 3 [json_name = "organizationId"];
    google.protobuf.Timestamp submission_date = 4 [json_name = "submissionDate"];
    
    // Basic information
    string storage_room_name = 5 [json_name = "storageRoomName"];
    string control_date = 6 [json_name = "controlDate"];  // Date as string
    float target_temperature = 7 [json_name = "targetTemperature"];
    
    // 4 different time measurements
    TemperatureMeasurement measurement_09 = 8 [json_name = "measurement09"];
    TemperatureMeasurement measurement_15 = 9 [json_name = "measurement15"];
    TemperatureMeasurement measurement_21 = 10 [json_name = "measurement21"];
    TemperatureMeasurement measurement_03 = 11 [json_name = "measurement03"];
    
    // Notes
    string notes = 12 [json_name = "notes"];
}

message CreateTemperatureControlLogRequest {
    TemperatureControlLogItem temperature_control_log_item = 1;
    int64 organization_id = 2;
    int64 department_id = 3;
}

message GetTemperatureControlLogListRequest {
    google.protobuf.Timestamp start_date = 1;
    google.protobuf.Timestamp end_date = 2;
    int64 organization_id = 3;
    int64 department_id = 4;
}

message GetTemperatureControlLogListResponse {
    repeated TemperatureControlLogItem temperature_control_log_item_list = 1;
    int64 count = 2;
}

// Storage control messages
message StorageSessionControl {
    float dry_food_temperature = 1 [json_name = "dryFoodTemperature"];  // nullable in TypeScript
    float dry_food_humidity = 2 [json_name = "dryFoodHumidity"];  // nullable in TypeScript
    bool expiration_check = 3 [json_name = "expirationCheck"];
    bool label_check = 4 [json_name = "labelCheck"];
    string storage_arrangement = 5 [json_name = "storageArrangement"];  // Notes about open packages, items on floor
    string controller_name = 6 [json_name = "controllerName"];
    string control_time = 7 [json_name = "controlTime"];  // "08:00-10:00" or "16:00-17:00"
}

message StorageDailyControl {
    StorageSessionControl morning_control = 1 [json_name = "morningControl"];
    StorageSessionControl evening_control = 2 [json_name = "eveningControl"];
}

message StorageControlLogItem {
    int64 id = 1 [json_name = "id"];
    int64 user_id = 2 [json_name = "userId"];
    int64 organization_id = 3 [json_name = "organizationId"];
    google.protobuf.Timestamp submission_date = 4 [json_name = "submissionDate"];
    
    // General information
    string storage_name = 5 [json_name = "storageName"];
    string control_month = 6 [json_name = "controlMonth"];
    
    // Daily controls (1-31 days) - using map for day number to daily control
    map<int32, StorageDailyControl> daily_controls = 7 [json_name = "dailyControls"];
}

// Storage control request/response messages
message CreateStorageControlLogRequest {
    StorageControlLogItem storage_control_log_item = 1;
    int64 organization_id = 2;
    int64 department_id = 3;
}

message GetStorageControlLogListRequest {
    google.protobuf.Timestamp start_date = 1;
    google.protobuf.Timestamp end_date = 2;
    int64 organization_id = 3;
    int64 department_id = 4;
}

message GetStorageControlLogListResponse {
    repeated StorageControlLogItem storage_control_log_item_list = 1;
    int64 count = 2;
}
message CreateWasteLogRequest {
    WasteLogItem waste_log_item = 1;
    int64 organization_id = 2;
    int64 department_id = 3;
}

message UpdateRecipeIngredientsRequest {
  string recipe_id = 1;
  repeated RecipeIngredientItem ingredients = 2;
  int64 organization_id = 3;
  int64 department_id = 4;
}

message GetDefrostableListRequest {
    int64 organization_id = 1;
    int64 department_id = 2;
}

message GetDefrostableListResponse {
    repeated IngredientItem defrostable_ingredient = 1;
    repeated RecipeItem defrostable_recipe = 2;
    int64 count = 3;
}

message GetFreezableListRequest {
    int64 organization_id = 1;
    int64 department_id = 2;
}

message GetFreezableListResponse {
    repeated IngredientItem freezable_ingredient = 1;
    repeated RecipeItem freezable_recipe = 2;
    int64 count = 3;
}

// Recipe Hot Log Messages
message RecipeHotLogItem {
    int64 id = 1 [json_name = "id"];
    int64 recipe_id = 2 [json_name = "recipeId"];
    int64 user_id = 3 [json_name = "userId"];
    int32 recipe_portion = 4 [json_name = "recipePortion"];
    
    // Preparation phase
    google.protobuf.Timestamp prep_start_time = 5 [json_name = "prepStartTime"];
    google.protobuf.Timestamp prep_end_time = 6 [json_name = "prepEndTime"];
    
    // First cooking phase
    google.protobuf.Timestamp cook1_start_time = 7 [json_name = "cook1StartTime"];
    google.protobuf.Timestamp cook1_end_time = 8 [json_name = "cook1EndTime"];
    int32 cook1_duration = 9 [json_name = "cook1Duration"]; // minutes
    double cook1_temperature = 10 [json_name = "cook1Temperature"]; // °C
    
    // Cooling phase
    google.protobuf.Timestamp cool_start_time = 11 [json_name = "coolStartTime"];
    google.protobuf.Timestamp cool_end_time = 12 [json_name = "coolEndTime"];
    
    // Second cooking phase (optional)
    google.protobuf.Timestamp cook2_start_time = 13 [json_name = "cook2StartTime"];
    google.protobuf.Timestamp cook2_end_time = 14 [json_name = "cook2EndTime"];
    int32 cook2_duration = 15 [json_name = "cook2Duration"];
    double cook2_temperature = 16 [json_name = "cook2Temperature"];
    
    // Storage phase
    google.protobuf.Timestamp storage_start_time = 17 [json_name = "storageStartTime"];
    google.protobuf.Timestamp storage_end_time = 18 [json_name = "storageEndTime"];
    
    // Temperature measurements
    double banket_car_temperature = 19 [json_name = "banketCarTemperature"];
    double center_temperature = 20 [json_name = "centerTemperature"];
    double prep_final_temperature = 21 [json_name = "prepFinalTemperature"];
    double cool_final_temperature = 22 [json_name = "coolFinalTemperature"];
    
    // Metadata
    google.protobuf.Timestamp created_at = 23 [json_name = "createdAt"];
    google.protobuf.Timestamp updated_at = 24 [json_name = "updatedAt"];
}

message CreateRecipeHotLogRequest {
    RecipeHotLogItem recipe_hot_log_item = 1;
    string organization_id = 2;
    int64 department_id = 3;
}

message GetRecipeHotLogListRequest {
    google.protobuf.Timestamp start_date = 1;
    google.protobuf.Timestamp end_date = 2;
    string organization_id = 3;
    int64 department_id = 4;
}

message GetRecipeHotLogListResponse {
    repeated RecipeHotLogItem recipe_hot_log_item_list = 1;
    int64 count = 2;
}