syntax = "proto3";

package api;

option go_package = "github.com/ibrahimozekici/chirpstack-api/go/v5/as/external/api";
option java_package = "io.chirpstack.api.as.external.api";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

service AlarmService {
    // Create creates the alarm
    rpc Create(CreateAlarmRequest) returns (CreateAlarmResponse) {
        option(google.api.http) = {
            post: "/api/alarm"
            body: "*"
        };
    }
    // Get return the alarm
    rpc Get(GetAlarmRequest) returns (GetAlarmResponse) {
        option (google.api.http) = {
            get: "/api/alarm/{alarm_id}"
        };
    }

    rpc List(ListAlarmRequest) returns (ListAlarmResponse) {
        option (google.api.http) = {
            get: "/api/alarm"
        }; 
    }
    // Update updates the alarm matching the given alarm_id.
    rpc Update(UpdateAlarmRequest) returns (GetAlarmResponse) {
        option (google.api.http) = {
            put: "/api/alarm/{alarm_id}"
            body: "*"
        };
    }

    // Delete deletes the alarm matching the given alarm_id.
    rpc Delete(DeleteAlarmRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/alarm/delete"
            body: "*"
        };
    }

}

message Alarm {

    // Alarm id.
    int64 id = 1;
     
    // Device EUI (HEX encoded).
    string dev_eui = 2 [json_name = "devEUI"]; 

    // Condition of alarm
    float min_treshold = 3 [json_name = "minTreshold"];

    // Value of alarm
    float max_treshold = 4 [json_name = "maxTreshold"];

    // Action of alarm
    string action = 5 [json_name = "action"];

    // Target of alarm
    string target = 6 [json_name = "target"];

    // Target of alarm
    string section = 7 [json_name = "section"];

    google.protobuf.Timestamp submission_date = 10 [json_name = "submission_date"];
}

message CreateAlarmResponse {
    repeated Alarm alarm = 1;
}
message CreateAlarmRequest {
    repeated Alarm create_alarm = 1;
}

message GetAlarmRequest {
    // Device EUI (HEX encoded).
    string alarm_id = 1 [json_name = "alarmID"];
}

message GetAlarmResponse {
    // Alarm object
    Alarm alarm = 1;
}

message DeleteAlarmRequest {
    // Alarm Id (HEX encoded).
    repeated string alarm_id = 1 [json_name = "alarmID"];
}

message UpdateAlarmRequest {
    // Alarm object to update.
    Alarm alarm = 1;

    string alarm_id = 2 [json_name = "alarmID"]; 
}

message ListAlarmRequest {
    // Max number of devices to return in the result-set.
    int64 limit = 1;

    // Offset in the result-set (for pagination).
    int64 offset = 2;

    // Device EUI (HEX encoded).
    string dev_eui = 3 [json_name = "devEUI"];
}

message ListAlarmResponse {
    // Total number of devices available within the result-set.
    int64 total_count = 1;

    // Devices within this result-set.
    repeated Alarm result = 2;
}