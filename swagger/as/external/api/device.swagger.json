{
  "swagger": "2.0",
  "info": {
    "title": "as/external/api/device.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/devices": {
      "get": {
        "summary": "List returns the available devices.",
        "operationId": "List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListDeviceResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "Max number of devices to return in the result-set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "offset",
            "description": "Offset in the result-set (for pagination).",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "applicationID",
            "description": "Application ID to filter on.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "search",
            "description": "Search on name or DevEUI.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "OrganizationId",
            "description": "Multicast-group ID to filter on (string formatted UUID).",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "multicastGroupID",
            "description": "Multicast-group ID to filter on (string formatted UUID).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "serviceProfileID",
            "description": "Service-profile ID to filter on (string formatted UUID).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "zoneID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "alarm",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      },
      "post": {
        "summary": "Create creates the given device.",
        "operationId": "Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetDeviceResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiCreateDeviceRequest"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/{dev_eui}": {
      "get": {
        "summary": "Get returns the device matching the given DevEUI.",
        "operationId": "Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetDeviceResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "dev_eui",
            "description": "Device EUI (HEX encoded).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      },
      "delete": {
        "summary": "Delete deletes the device matching the given DevEUI.",
        "operationId": "Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "dev_eui",
            "description": "Device EUI (HEX encoded).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/{dev_eui}/activation": {
      "get": {
        "summary": "GetActivation returns the current activation details of the device (OTAA and ABP).",
        "operationId": "GetActivation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetDeviceActivationResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "dev_eui",
            "description": "Device EUI (HEX encoded).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      },
      "delete": {
        "summary": "Deactivate de-activates the device.",
        "operationId": "Deactivate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "dev_eui",
            "description": "Device EUI (HEX encoded).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/{dev_eui}/devnonce": {
      "delete": {
        "summary": "ClearDeviceNonces deletes the device older activation records for the given DevEUI.\r\n  * These are clear older DevNonce records from device activation records in Network Server\r\n  * These clears all DevNonce records but keeps latest 20 records for maintain device activation status",
        "operationId": "ClearDeviceNonces",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "dev_eui",
            "description": "Device EUI (HEX encoded).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/{dev_eui}/events": {
      "get": {
        "summary": "StreamEventLogs stream the device events (uplink payloads, ACKs, joins, errors).\r\n  * This endpoint is intended for debugging only.\r\n  * This endpoint does not work from a web-browser.",
        "operationId": "StreamEventLogs",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "$ref": "#/x-stream-definitions/apiStreamDeviceEventLogsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "dev_eui",
            "description": "Device EUI (HEX encoded).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/{dev_eui}/frames": {
      "get": {
        "summary": "StreamFrameLogs streams the uplink and downlink frame-logs for the given DevEUI.\r\n  * These are the raw LoRaWAN frames and this endpoint is intended for debugging only.\r\n  * This endpoint does not work from a web-browser.",
        "operationId": "StreamFrameLogs",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "$ref": "#/x-stream-definitions/apiStreamDeviceFrameLogsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "dev_eui",
            "description": "Device EUI (HEX encoded).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/{dev_eui}/getRandomDevAddr": {
      "post": {
        "summary": "GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into account.",
        "operationId": "GetRandomDevAddr",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetRandomDevAddrResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "dev_eui",
            "description": "Device EUI (HEX encoded).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/{dev_eui}/keys": {
      "get": {
        "summary": "GetKeys returns the device-keys for the given DevEUI.",
        "operationId": "GetKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetDeviceKeysResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "dev_eui",
            "description": "Device EUI (HEX encoded).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      },
      "delete": {
        "summary": "DeleteKeys deletes the device-keys for the given DevEUI.",
        "operationId": "DeleteKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "dev_eui",
            "description": "Device EUI (HEX encoded).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/{dev_eui}/stats": {
      "get": {
        "summary": "GetStats returns the device stats.",
        "operationId": "GetStats",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetDeviceStatsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "dev_eui",
            "description": "DevEUI (HEX encoded).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "interval",
            "description": "Aggregation interval.  One of \"second\", \"minute\", \"hour\", \"day\", \"week\",\r\n\"month\", \"quarter\", \"year\".  Case insensitive.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "startTimestamp",
            "description": "Timestamp to start from.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTimestamp",
            "description": "Timestamp until to get from.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/{device.dev_eui}": {
      "put": {
        "summary": "Update updates the device matching the given DevEUI.",
        "operationId": "Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "device.dev_eui",
            "description": "Device EUI (HEX encoded).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiUpdateDeviceRequest"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/{device_activation.dev_eui}/activate": {
      "post": {
        "summary": "Activate (re)activates the device with the given parameters (for ABP or for importing OTAA activations).",
        "operationId": "Activate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "device_activation.dev_eui",
            "description": "Device EUI (HEX encoded).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiActivateDeviceRequest"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/{device_keys.dev_eui}/keys": {
      "post": {
        "summary": "CreateKeys creates the given device-keys.",
        "operationId": "CreateKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "device_keys.dev_eui",
            "description": "Device EUI (HEX encoded).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiCreateDeviceKeysRequest"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ]
      },
      "put": {
        "summary": "UpdateKeys updates the device-keys.",
        "operationId": "UpdateKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "device_keys.dev_eui",
            "description": "Device EUI (HEX encoded).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiUpdateDeviceKeysRequest"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    }
  },
  "definitions": {
    "apiActivateDeviceRequest": {
      "type": "object",
      "properties": {
        "deviceActivation": {
          "$ref": "#/definitions/apiDeviceActivation"
        }
      }
    },
    "apiCreateDeviceKeysRequest": {
      "type": "object",
      "properties": {
        "deviceKeys": {
          "$ref": "#/definitions/apiDeviceKeys",
          "description": "Device-keys object to create."
        }
      }
    },
    "apiCreateDeviceRequest": {
      "type": "object",
      "properties": {
        "device": {
          "$ref": "#/definitions/apiDevice",
          "description": "Device object to create."
        }
      }
    },
    "apiDAlarm": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "description": "Alarm id."
        },
        "dev_eui": {
          "type": "string",
          "description": "Device EUI (HEX encoded)."
        },
        "min_treshold": {
          "type": "number",
          "format": "float",
          "title": "Condition of alarm"
        },
        "max_treshold": {
          "type": "number",
          "format": "float",
          "title": "Value of alarm"
        },
        "sms": {
          "type": "boolean",
          "format": "boolean"
        },
        "email": {
          "type": "boolean",
          "format": "boolean"
        },
        "temperature": {
          "type": "boolean",
          "format": "boolean"
        },
        "humadity": {
          "type": "boolean",
          "format": "boolean"
        },
        "ec": {
          "type": "boolean",
          "format": "boolean"
        },
        "door": {
          "type": "boolean",
          "format": "boolean"
        },
        "w_leak": {
          "type": "boolean",
          "format": "boolean"
        },
        "is_time_scheduled": {
          "type": "boolean",
          "format": "boolean"
        },
        "notification": {
          "type": "boolean",
          "format": "boolean"
        },
        "username": {
          "type": "string"
        },
        "alarm_date_time": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiDAlarmDateTime"
          }
        }
      }
    },
    "apiDAlarmDateTime": {
      "type": "object",
      "properties": {
        "alarm_day": {
          "type": "string",
          "format": "int64"
        },
        "alarm_start_time": {
          "type": "number",
          "format": "float"
        },
        "alarm_end_time": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "apiDevice": {
      "type": "object",
      "properties": {
        "devEUI": {
          "type": "string",
          "description": "Device EUI (HEX encoded)."
        },
        "name": {
          "type": "string",
          "description": "Name of the device (if left blank, it will be set to the DevEUI)."
        },
        "applicationID": {
          "type": "string",
          "format": "int64",
          "description": "ID of the application to which the device must be added.\r\nIt is possible to move a device to a different application on update,\r\ngiven that both the old and the new application share the same\r\nservice-profile."
        },
        "description": {
          "type": "string",
          "description": "Description of the device."
        },
        "deviceProfileID": {
          "type": "string",
          "description": "DeviceProfileID attached to the device."
        },
        "skipFCntCheck": {
          "type": "boolean",
          "format": "boolean",
          "description": "Skip frame-counter checks (this is insecure, but could be helpful for debugging)."
        },
        "referenceAltitude": {
          "type": "number",
          "format": "double",
          "description": "Reference altitude.\r\nWhen using geolocation, this altitude will be used as a reference\r\n(when supported by the geolocation-server) to increase geolocation\r\naccuracy."
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Variables (user defined).\r\nThese variables can be used together with integrations to store tokens /\r\nsecrets that must be configured per device. These variables are not\r\nexposed in the event payloads."
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Tags (user defined).\r\nThese tags are exposed in the event payloads or to integration. Tags are\r\nintended for aggregation and filtering."
        },
        "isDisabled": {
          "type": "boolean",
          "format": "boolean",
          "description": "Device is disabled."
        },
        "dataTime": {
          "type": "string",
          "format": "int64"
        },
        "latitude": {
          "type": "number",
          "format": "double",
          "title": "Device lat value"
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "title": "Device lng value"
        },
        "deviceProfileName": {
          "type": "string",
          "title": "Device Profile Name"
        },
        "deviceType": {
          "type": "string",
          "format": "int64"
        },
        "organizationId": {
          "type": "string",
          "format": "int64"
        },
        "zoneId": {
          "type": "string",
          "format": "int64"
        },
        "temperatureCalibration": {
          "type": "number",
          "format": "double"
        },
        "humadityCalibration": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiDeviceActivation": {
      "type": "object",
      "properties": {
        "devEUI": {
          "type": "string",
          "description": "Device EUI (HEX encoded)."
        },
        "devAddr": {
          "type": "string",
          "description": "Device address (HEX encoded)."
        },
        "appSKey": {
          "type": "string",
          "description": "Application session key (HEX encoded)."
        },
        "nwkSEncKey": {
          "type": "string",
          "description": "Network session encryption key (HEX encoded)."
        },
        "sNwkSIntKey": {
          "type": "string",
          "description": "Serving network session integrity key (HEX encoded)."
        },
        "fNwkSIntKey": {
          "type": "string",
          "description": "Forwarding network session integrity key (HEX encoded)."
        },
        "fCntUp": {
          "type": "integer",
          "format": "int64",
          "description": "Uplink frame-counter."
        },
        "nFCntDown": {
          "type": "integer",
          "format": "int64",
          "description": "Downlink network frame-counter."
        },
        "aFCntDown": {
          "type": "integer",
          "format": "int64",
          "description": "Downlink application frame-counter."
        }
      }
    },
    "apiDeviceAlarm": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "description": "Alarm id."
        },
        "devEUI": {
          "type": "string",
          "description": "Device EUI (HEX encoded)."
        },
        "minTreshold": {
          "type": "number",
          "format": "float",
          "title": "Condition of alarm"
        },
        "maxTreshold": {
          "type": "number",
          "format": "float",
          "title": "Value of alarm"
        },
        "sms": {
          "type": "boolean",
          "format": "boolean"
        },
        "email": {
          "type": "boolean",
          "format": "boolean"
        },
        "temperature": {
          "type": "boolean",
          "format": "boolean"
        },
        "humadity": {
          "type": "boolean",
          "format": "boolean"
        },
        "ec": {
          "type": "boolean",
          "format": "boolean"
        },
        "door": {
          "type": "boolean",
          "format": "boolean"
        },
        "w_leak": {
          "type": "boolean",
          "format": "boolean"
        },
        "submission_date": {
          "type": "string",
          "format": "date-time"
        },
        "ip_address": {
          "type": "string"
        }
      }
    },
    "apiDeviceAlarmLogs": {
      "type": "object",
      "properties": {
        "devEUI": {
          "type": "string"
        },
        "minTreshold": {
          "type": "number",
          "format": "float",
          "title": "Condition of alarm"
        },
        "maxTreshold": {
          "type": "number",
          "format": "float",
          "title": "Value of alarm"
        },
        "userId": {
          "type": "string",
          "format": "int64"
        },
        "ipAddress": {
          "type": "string"
        },
        "isDeleted": {
          "type": "string",
          "format": "int64"
        },
        "temperature": {
          "type": "boolean",
          "format": "boolean"
        },
        "humadity": {
          "type": "boolean",
          "format": "boolean"
        },
        "ec": {
          "type": "boolean",
          "format": "boolean"
        },
        "door": {
          "type": "boolean",
          "format": "boolean"
        },
        "w_leak": {
          "type": "boolean",
          "format": "boolean"
        },
        "sms": {
          "type": "boolean",
          "format": "boolean"
        },
        "submissionDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "apiDeviceKeys": {
      "type": "object",
      "properties": {
        "devEUI": {
          "type": "string",
          "description": "Device EUI (HEX encoded)."
        },
        "nwkKey": {
          "type": "string",
          "title": "Network root key (HEX encoded).\r\nNote: For LoRaWAN 1.0.x, use this field for the LoRaWAN 1.0.x 'AppKey`!"
        },
        "appKey": {
          "type": "string",
          "title": "Application root key (HEX encoded).\r\nNote: This field only needs to be set for LoRaWAN 1.1.x devices!"
        },
        "genAppKey": {
          "type": "string",
          "description": "Gen application key (HEX encoded).\r\nThis is an optional key that only must be set for LORaWAN 1.0.x devices\r\nthat implement the remote multicast setup specification."
        }
      }
    },
    "apiDeviceListItem": {
      "type": "object",
      "properties": {
        "devEUI": {
          "type": "string",
          "description": "Device EUI (HEX encoded)."
        },
        "name": {
          "type": "string",
          "description": "Name of the device."
        },
        "applicationID": {
          "type": "string",
          "format": "int64",
          "description": "Application ID."
        },
        "description": {
          "type": "string",
          "description": "Description of the device."
        },
        "deviceProfileID": {
          "type": "string",
          "description": "Device-profile ID attached to the device."
        },
        "deviceProfileName": {
          "type": "string",
          "description": "Device-profile name."
        },
        "deviceStatusBattery": {
          "type": "integer",
          "format": "int64",
          "description": "The device battery status (deprecated, use device_status_battery_level).\r\n0:      The end-device is connected to an external power source\r\n1..254: The battery level, 1 being at minimum and 254 being at maximum\r\n255:    The end-device was not able to measure the battery level\r\n256:    The device-status is not available."
        },
        "deviceStatusMargin": {
          "type": "integer",
          "format": "int32",
          "description": "The device margin status\r\n-32..32: The demodulation SNR ration in dB\r\n256:     The device-status is not available."
        },
        "deviceStatusExternalPowerSource": {
          "type": "boolean",
          "format": "boolean",
          "description": "Device is connected to an external power source."
        },
        "deviceStatusBatteryLevelUnavailable": {
          "type": "boolean",
          "format": "boolean",
          "description": "Device battery status is unavailable."
        },
        "deviceStatusBatteryLevel": {
          "type": "number",
          "format": "float",
          "description": "Device battery level as a percentage."
        },
        "lastSeenAt": {
          "type": "string",
          "format": "date-time",
          "description": "The last time the application-server received any data from the device,\r\nor an empty string when the device never sent any data."
        },
        "dataTime": {
          "type": "string",
          "format": "int64",
          "title": "data time"
        },
        "latitude": {
          "type": "number",
          "format": "double",
          "title": "device lat value"
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "title": "device lng value"
        },
        "deviceType": {
          "type": "string",
          "format": "int64"
        },
        "organizationId": {
          "type": "string",
          "format": "int64"
        },
        "alarms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiDAlarm"
          }
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Variables (user defined).\r\nThese variables can be used together with integrations to store tokens /\r\nsecrets that must be configured per device. These variables are not\r\nexposed in the event payloads."
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "New field for custom attributes\r\ngoogle.protobuf.Struct custom_attributes = 19  [json_name = \"custom_attributes\"];"
        },
        "zone_name": {
          "type": "string"
        }
      }
    },
    "apiDeviceStats": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of the (aggregated) measurement."
        },
        "rxPackets": {
          "type": "integer",
          "format": "int64",
          "description": "Packets received from the device."
        },
        "gwRssi": {
          "type": "number",
          "format": "float",
          "description": "Average RSSI (as reported by the gateway(s))."
        },
        "gwSnr": {
          "type": "number",
          "format": "float",
          "description": "Average SNR (as reported by the gateway(s))."
        },
        "rxPacketsPerFrequency": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64"
          },
          "description": "Packets received by frequency."
        },
        "rxPacketsPerDr": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64"
          },
          "description": "Packets received by DR."
        },
        "errors": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64"
          },
          "description": "Error count."
        }
      }
    },
    "apiDownlinkFrameLog": {
      "type": "object",
      "properties": {
        "txInfo": {
          "$ref": "#/definitions/gwDownlinkTXInfo",
          "description": "TX information of the downlink."
        },
        "phyPayloadJSON": {
          "type": "string",
          "description": "LoRaWAN PHYPayload."
        },
        "gatewayID": {
          "type": "string",
          "description": "Gateway ID."
        },
        "publishedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Published at timestamp."
        }
      }
    },
    "apiGetDeviceActivationResponse": {
      "type": "object",
      "properties": {
        "deviceActivation": {
          "$ref": "#/definitions/apiDeviceActivation",
          "description": "Device-activation object."
        }
      }
    },
    "apiGetDeviceKeysResponse": {
      "type": "object",
      "properties": {
        "deviceKeys": {
          "$ref": "#/definitions/apiDeviceKeys",
          "description": "Device-key object."
        }
      }
    },
    "apiGetDeviceResponse": {
      "type": "object",
      "properties": {
        "device": {
          "$ref": "#/definitions/apiDevice",
          "description": "Device object."
        },
        "lastSeenAt": {
          "type": "string",
          "format": "date-time",
          "description": "Last seen timestamp."
        },
        "deviceStatusBattery": {
          "type": "integer",
          "format": "int64",
          "description": "The device battery status\r\n0:      The end-device is connected to an external power source\r\n1..254: The battery level, 1 being at minimum and 254 being at maximum\r\n255:    The end-device was not able to measure the battery level\r\n256:    The device-status is not available."
        },
        "deviceStatusMargin": {
          "type": "integer",
          "format": "int32",
          "description": "The device margin status\r\n-32..32: The demodulation SNR ration in dB\r\n256:     The device-status is not available."
        },
        "location": {
          "$ref": "#/definitions/commonLocation",
          "description": "Device location.\r\nThis will set when the network-server was able to resolve the location\r\nusing the geolocation-server."
        },
        "alarms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiDeviceAlarm"
          }
        },
        "logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiDeviceAlarmLogs"
          }
        }
      }
    },
    "apiGetDeviceStatsResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiDeviceStats"
          }
        }
      }
    },
    "apiGetRandomDevAddrResponse": {
      "type": "object",
      "properties": {
        "devAddr": {
          "type": "string",
          "description": "Device address (HEX encoded)."
        }
      }
    },
    "apiListDeviceResponse": {
      "type": "object",
      "properties": {
        "totalCount": {
          "type": "string",
          "format": "int64",
          "description": "Total number of devices available within the result-set."
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiDeviceListItem"
          },
          "description": "Devices within this result-set."
        }
      }
    },
    "apiStreamDeviceEventLogsResponse": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "The event type."
        },
        "payloadJSON": {
          "type": "string",
          "description": "The event payload in JSON encoding."
        },
        "publishedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Published at timestamp."
        },
        "streamID": {
          "type": "string",
          "description": "Stream ID."
        }
      }
    },
    "apiStreamDeviceFrameLogsResponse": {
      "type": "object",
      "properties": {
        "uplinkFrame": {
          "$ref": "#/definitions/apiUplinkFrameLog",
          "description": "Contains an uplink frame."
        },
        "downlinkFrame": {
          "$ref": "#/definitions/apiDownlinkFrameLog",
          "description": "Contains a downlink frame."
        }
      }
    },
    "apiUpdateDeviceKeysRequest": {
      "type": "object",
      "properties": {
        "deviceKeys": {
          "$ref": "#/definitions/apiDeviceKeys",
          "description": "Device-keys object to update."
        }
      }
    },
    "apiUpdateDeviceRequest": {
      "type": "object",
      "properties": {
        "device": {
          "$ref": "#/definitions/apiDevice",
          "description": "Device object to update."
        }
      }
    },
    "apiUplinkFrameLog": {
      "type": "object",
      "properties": {
        "txInfo": {
          "$ref": "#/definitions/gwUplinkTXInfo",
          "description": "TX information of the uplink."
        },
        "rxInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/gwUplinkRXInfo"
          },
          "description": "RX information of the uplink."
        },
        "phyPayloadJSON": {
          "type": "string",
          "description": "LoRaWAN PHYPayload."
        },
        "publishedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Published at timestamp."
        }
      }
    },
    "commonLocation": {
      "type": "object",
      "properties": {
        "latitude": {
          "type": "number",
          "format": "double",
          "description": "Latitude."
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "description": "Longitude."
        },
        "altitude": {
          "type": "number",
          "format": "double",
          "description": "Altitude."
        },
        "source": {
          "$ref": "#/definitions/commonLocationSource",
          "description": "Location source."
        },
        "accuracy": {
          "type": "integer",
          "format": "int64",
          "description": "Accuracy (in meters)."
        }
      }
    },
    "commonLocationSource": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "GPS",
        "CONFIG",
        "GEO_RESOLVER_TDOA",
        "GEO_RESOLVER_RSSI",
        "GEO_RESOLVER_GNSS",
        "GEO_RESOLVER_WIFI"
      ],
      "default": "UNKNOWN",
      "description": " - UNKNOWN: Unknown.\n - GPS: GPS.\n - CONFIG: Manually configured.\n - GEO_RESOLVER_TDOA: Geo resolver (TDOA).\n - GEO_RESOLVER_RSSI: Geo resolver (RSSI).\n - GEO_RESOLVER_GNSS: Geo resolver (GNSS).\n - GEO_RESOLVER_WIFI: Geo resolver (WIFI)."
    },
    "commonModulation": {
      "type": "string",
      "enum": [
        "LORA",
        "FSK",
        "LR_FHSS"
      ],
      "default": "LORA",
      "title": "- LORA: LoRa\n - FSK: FSK\n - LR_FHSS: LR-FHSS"
    },
    "gwCRCStatus": {
      "type": "string",
      "enum": [
        "NO_CRC",
        "BAD_CRC",
        "CRC_OK"
      ],
      "default": "NO_CRC",
      "description": " - NO_CRC: No CRC.\n - BAD_CRC: Bad CRC.\n - CRC_OK: CRC OK."
    },
    "gwDelayTimingInfo": {
      "type": "object",
      "properties": {
        "delay": {
          "type": "string",
          "description": "Delay (duration).\r\nThe delay will be added to the gateway internal timing, provided by the context object."
        }
      }
    },
    "gwDownlinkTXInfo": {
      "type": "object",
      "properties": {
        "gatewayID": {
          "type": "string",
          "format": "byte",
          "description": "Gateway ID.\r\nDeprecated: replaced by gateway_id in DownlinkFrame."
        },
        "frequency": {
          "type": "integer",
          "format": "int64",
          "description": "TX frequency (in Hz)."
        },
        "power": {
          "type": "integer",
          "format": "int32",
          "description": "TX power (in dBm)."
        },
        "modulation": {
          "$ref": "#/definitions/commonModulation",
          "description": "Modulation."
        },
        "loRaModulationInfo": {
          "$ref": "#/definitions/gwLoRaModulationInfo",
          "description": "LoRa modulation information."
        },
        "fskModulationInfo": {
          "$ref": "#/definitions/gwFSKModulationInfo",
          "description": "FSK modulation information."
        },
        "board": {
          "type": "integer",
          "format": "int64",
          "description": "The board identifier for emitting the frame."
        },
        "antenna": {
          "type": "integer",
          "format": "int64",
          "description": "The antenna identifier for emitting the frame."
        },
        "timing": {
          "$ref": "#/definitions/gwDownlinkTiming",
          "description": "Timing defines the downlink timing to use."
        },
        "immediatelyTimingInfo": {
          "$ref": "#/definitions/gwImmediatelyTimingInfo",
          "description": "Immediately timing information."
        },
        "delayTimingInfo": {
          "$ref": "#/definitions/gwDelayTimingInfo",
          "description": "Context based delay timing information."
        },
        "gpsEpochTimingInfo": {
          "$ref": "#/definitions/gwGPSEpochTimingInfo",
          "description": "GPS Epoch timing information."
        },
        "context": {
          "type": "string",
          "format": "byte",
          "description": "Gateway specific context.\r\nIn case of a Class-A downlink, this contains a copy of the uplink context."
        }
      }
    },
    "gwDownlinkTiming": {
      "type": "string",
      "enum": [
        "IMMEDIATELY",
        "DELAY",
        "GPS_EPOCH"
      ],
      "default": "IMMEDIATELY",
      "description": " - IMMEDIATELY: Send the downlink immediately.\n - DELAY: Send downlink at the given delay (based on provided context).\n - GPS_EPOCH: Send at given GPS epoch value."
    },
    "gwEncryptedFineTimestamp": {
      "type": "object",
      "properties": {
        "aesKeyIndex": {
          "type": "integer",
          "format": "int64",
          "description": "AES key index used for encrypting the fine timestamp."
        },
        "encryptedNS": {
          "type": "string",
          "format": "byte",
          "description": "Encrypted 'main' fine-timestamp (ns precision part of the timestamp)."
        },
        "fpgaID": {
          "type": "string",
          "format": "byte",
          "description": "FPGA ID."
        }
      }
    },
    "gwFSKModulationInfo": {
      "type": "object",
      "properties": {
        "frequencyDeviation": {
          "type": "integer",
          "format": "int64",
          "description": "Frequency deviation."
        },
        "datarate": {
          "type": "integer",
          "format": "int64",
          "description": "FSK datarate (bits / sec)."
        }
      }
    },
    "gwFineTimestampType": {
      "type": "string",
      "enum": [
        "NONE",
        "ENCRYPTED",
        "PLAIN"
      ],
      "default": "NONE",
      "description": " - NONE: No fine-timestamp available.\n - ENCRYPTED: Encrypted fine-timestamp.\n - PLAIN: Plain fine-timestamp."
    },
    "gwGPSEpochTimingInfo": {
      "type": "object",
      "properties": {
        "timeSinceGPSEpoch": {
          "type": "string",
          "description": "Duration since GPS Epoch."
        }
      }
    },
    "gwImmediatelyTimingInfo": {
      "type": "object"
    },
    "gwLRFHSSModulationInfo": {
      "type": "object",
      "properties": {
        "operatingChannelWidth": {
          "type": "integer",
          "format": "int64",
          "description": "Operating channel width (OCW) in Hz."
        },
        "codeRate": {
          "type": "string",
          "description": "Code-rate."
        },
        "gridSteps": {
          "type": "integer",
          "format": "int64",
          "description": "Hopping grid number of steps."
        }
      }
    },
    "gwLoRaModulationInfo": {
      "type": "object",
      "properties": {
        "bandwidth": {
          "type": "integer",
          "format": "int64",
          "description": "Bandwidth."
        },
        "spreadingFactor": {
          "type": "integer",
          "format": "int64",
          "description": "Speading-factor."
        },
        "codeRate": {
          "type": "string",
          "description": "Code-rate."
        },
        "polarizationInversion": {
          "type": "boolean",
          "format": "boolean",
          "description": "Polarization inversion."
        }
      }
    },
    "gwPlainFineTimestamp": {
      "type": "object",
      "properties": {
        "time": {
          "type": "string",
          "format": "date-time",
          "description": "Full timestamp."
        }
      }
    },
    "gwUplinkRXInfo": {
      "type": "object",
      "properties": {
        "gatewayID": {
          "type": "string",
          "format": "byte",
          "description": "Gateway ID."
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "description": "RX time (only set when the gateway has a GPS module)."
        },
        "timeSinceGPSEpoch": {
          "type": "string",
          "description": "RX time since GPS epoch (only set when the gateway has a GPS module)."
        },
        "rssi": {
          "type": "integer",
          "format": "int32",
          "description": "RSSI."
        },
        "loRaSNR": {
          "type": "number",
          "format": "double",
          "description": "LoRa SNR."
        },
        "channel": {
          "type": "integer",
          "format": "int64",
          "description": "Channel."
        },
        "rfChain": {
          "type": "integer",
          "format": "int64",
          "description": "RF Chain."
        },
        "board": {
          "type": "integer",
          "format": "int64",
          "description": "Board."
        },
        "antenna": {
          "type": "integer",
          "format": "int64",
          "description": "Antenna."
        },
        "location": {
          "$ref": "#/definitions/commonLocation",
          "description": "Location."
        },
        "fineTimestampType": {
          "$ref": "#/definitions/gwFineTimestampType",
          "description": "Fine-timestamp type."
        },
        "encryptedFineTimestamp": {
          "$ref": "#/definitions/gwEncryptedFineTimestamp",
          "description": "Encrypted fine-timestamp data."
        },
        "plainFineTimestamp": {
          "$ref": "#/definitions/gwPlainFineTimestamp",
          "description": "Plain fine-timestamp data."
        },
        "context": {
          "type": "string",
          "format": "byte",
          "description": "Gateway specific context."
        },
        "uplinkID": {
          "type": "string",
          "format": "byte",
          "description": "Uplink ID (UUID bytes).\r\nUnique and random ID which can be used to correlate the uplink across multiple logs."
        },
        "crcStatus": {
          "$ref": "#/definitions/gwCRCStatus",
          "description": "CRC status."
        }
      }
    },
    "gwUplinkTXInfo": {
      "type": "object",
      "properties": {
        "frequency": {
          "type": "integer",
          "format": "int64",
          "description": "Frequency (Hz)."
        },
        "modulation": {
          "$ref": "#/definitions/commonModulation",
          "description": "Modulation."
        },
        "loRaModulationInfo": {
          "$ref": "#/definitions/gwLoRaModulationInfo",
          "description": "LoRa modulation information."
        },
        "fskModulationInfo": {
          "$ref": "#/definitions/gwFSKModulationInfo",
          "description": "FSK modulation information."
        },
        "lrFHSSModulationInfo": {
          "$ref": "#/definitions/gwLRFHSSModulationInfo",
          "description": "LR-FHSS modulation information."
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "runtimeStreamError": {
      "type": "object",
      "properties": {
        "grpcCode": {
          "type": "integer",
          "format": "int32"
        },
        "httpCode": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "httpStatus": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  },
  "x-stream-definitions": {
    "apiStreamDeviceEventLogsResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/apiStreamDeviceEventLogsResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of apiStreamDeviceEventLogsResponse"
    },
    "apiStreamDeviceFrameLogsResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/apiStreamDeviceFrameLogsResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of apiStreamDeviceFrameLogsResponse"
    }
  }
}
